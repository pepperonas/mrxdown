# Build workflow for MrxDown
name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false
        
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm run postinstall
      env:
        ELECTRON_CACHE: ~/.cache/electron
        ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
      
    - name: Install Linux dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-setuptools build-essential libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxss1 libasound2-dev libgtk-3-dev libgbm-dev libxrandr2 libgconf-2-4 libxtst6 libxss1 libxcomposite1 libasound2-dev libatspi2.0-0 libdrm2 libgtk-3-0 libgtk-3-dev xvfb
        
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        echo "Using default Windows build environment"
        
    - name: Build app for macOS
      if: matrix.os == 'macos-latest'
      run: |
        npm run build-mac
        # List built artifacts for debugging
        echo "Build completed, listing artifacts:"
        ls -la dist/
        # Verify that expected files exist
        if [ ! -f dist/*.zip ]; then echo "Error: ZIP file not found"; exit 1; fi
        echo "macOS build verification successful"
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
        
    - name: Build app for Windows
      if: matrix.os == 'windows-latest'
      run: |
        npm run build-win
        echo "Build completed, listing artifacts:"
        dir dist
        echo "Windows build verification successful"
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
        
    - name: Build app for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Use virtual display for Linux builds
        xvfb-run -a npm run build-linux
        echo "Build completed, listing artifacts:"
        ls -la dist/
        # Verify that expected files exist
        if [ ! -f dist/*.AppImage ]; then echo "Error: AppImage not found"; exit 1; fi
        echo "Linux build verification successful"
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
        DISPLAY: :99
      
    - name: Upload build artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.zip
        retention-days: 7
        
    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
          dist/*.exe.blockmap
        retention-days: 7
        
    - name: Upload build artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.snap
        retention-days: 7