name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  discussions: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false
        
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm run postinstall
      env:
        ELECTRON_CACHE: ~/.cache/electron
        ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
      
    - name: Install Linux dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-setuptools build-essential libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxss1 libasound2-dev libgtk-3-dev libgbm-dev libxrandr2 libgconf-2-4 libxtst6 libxss1 libxcomposite1 libasound2-dev libatspi2.0-0 libdrm2 libgtk-3-0 libgtk-3-dev xvfb
        
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        echo "Using default Windows build environment"
        
    - name: Build app for macOS
      if: matrix.os == 'macos-latest'
      run: |
        # Build both ZIP and DMG for release
        npm run build-mac
        echo "Build completed, listing artifacts:"
        ls -la dist/
        # Verify artifacts
        if [ ! -f dist/*.zip ]; then echo "Warning: ZIP file not found"; fi
        if [ ! -f dist/*.dmg ]; then echo "Warning: DMG file not found"; fi
        echo "macOS release build verification completed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
        
    - name: Build app for Windows
      if: matrix.os == 'windows-latest'
      run: |
        npm run build-win
        echo "Build completed, listing artifacts:"
        dir dist
        echo "Windows release build verification completed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
        
    - name: Build app for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Use virtual display for Linux builds
        xvfb-run -a npm run build-linux
        echo "Build completed, listing artifacts:"
        ls -la dist/
        echo "Linux release build verification completed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
        DISPLAY: :99
        
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-artifacts
        path: |
          dist/*.zip
          dist/*.dmg
          dist/*.dmg.blockmap
        if-no-files-found: warn
        retention-days: 30
          
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts
        path: |
          dist/*.exe
          dist/*.exe.blockmap
        if-no-files-found: warn
        retention-days: 30
          
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-artifacts
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.snap
          dist/*.rpm
        if-no-files-found: warn
        retention-days: 30
  
  create-release:
    needs: release
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find . -name "*.exe" -o -name "*.zip" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.snap" | sort
        echo "Total artifact count: $(find . -name "*.exe" -o -name "*.zip" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.snap" | wc -l)"
      
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref }}
        name: MrxDown ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## üéâ MrxDown ${{ github.ref }} - Multi-Platform Release
          
          ### üì• Downloads
          
          **macOS**
          - **ZIP** f√ºr Intel & Apple Silicon Macs (Universal Binary)
          
          **Windows**
          - NSIS Installer f√ºr Windows 10/11
          - Portable Version (keine Installation erforderlich)
          
          **Linux**
          - AppImage (universal)
          - DEB-Package f√ºr Ubuntu/Debian
          - Snap-Package
          
          ### ‚ú® Features
          
          - üåô Modern Dark Theme
          - üìë Multi-Tab Support
          - üñ±Ô∏è Drag & Drop
          - ‚ö° Live-Vorschau
          - üìä Tabellen-Editor
          - üîß Formatierungs-Toolbar
          - üìÇ Datei-Explorer
          - üßò Zen-Modus
          - üíæ Auto-Save
          - üì§ HTML-Export
          - ‚å®Ô∏è Keyboard Shortcuts
          
          ### üîß Installation
          
          1. Lade die entsprechende Version f√ºr dein System herunter
          2. Installiere die Anwendung
          3. Starte MrxDown und beginne mit dem Schreiben!
          
          ### üêõ Bekannte Probleme
          
          - Siehe [Issues](https://github.com/pepperonas/mrxdown/issues)
          
          ### üìû Support
          
          - **Issues**: [GitHub Issues](https://github.com/pepperonas/mrxdown/issues)
          - **Diskussionen**: [GitHub Discussions](https://github.com/pepperonas/mrxdown/discussions)
          
          ---
          
          **Entwickelt von Martin Pfeffer ¬© 2025**
          
          üîó [GitHub Repository](https://github.com/pepperonas/mrxdown) | üåê [Website](https://pepperonas.com)
        artifacts: |
          **/*.zip
          **/*.dmg
          **/*.exe
          **/*.AppImage
          **/*.deb
          **/*.snap
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        replacesArtifacts: true
        makeLatest: true
        
