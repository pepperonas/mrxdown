name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  discussions: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false
        
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Linux dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-setuptools build-essential libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxss1 libasound2-dev libgtk-3-dev libgbm-dev
        
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        echo "Using default Windows build environment"
        
    - name: Build app for macOS
      if: matrix.os == 'macos-latest'
      run: |
        # Create custom build script to avoid DMG issues in CI
        npx electron-builder --mac --config.mac.target.target=zip --publish=never
        # Remove quarantine attributes from built app
        find dist -name "*.app" -exec xattr -cr {} \; 2>/dev/null || true
        # Remove quarantine from ZIP contents
        find dist -name "*.zip" -exec xattr -cr {} \; 2>/dev/null || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Build app for Windows
      if: matrix.os == 'windows-latest'
      run: npm run build-win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Build app for Linux
      if: matrix.os == 'ubuntu-latest'
      run: npm run build-linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-artifacts
        path: |
          dist/*.zip
          
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts
        path: |
          dist/*.exe
          
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-artifacts
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.snap
  
  create-release:
    needs: release
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref }}
        name: MrxDown ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## 🎉 MrxDown ${{ github.ref }} - Multi-Platform Release
          
          ### 📥 Downloads
          
          **macOS**
          - **ZIP** für Intel & Apple Silicon Macs (Universal Binary)
          
          **Windows**
          - NSIS Installer für Windows 10/11
          - Portable Version (keine Installation erforderlich)
          
          **Linux**
          - AppImage (universal)
          - DEB-Package für Ubuntu/Debian
          - Snap-Package
          
          ### ✨ Features
          
          - 🌙 Modern Dark Theme
          - 📑 Multi-Tab Support
          - 🖱️ Drag & Drop
          - ⚡ Live-Vorschau
          - 📊 Tabellen-Editor
          - 🔧 Formatierungs-Toolbar
          - 📂 Datei-Explorer
          - 🧘 Zen-Modus
          - 💾 Auto-Save
          - 📤 HTML-Export
          - ⌨️ Keyboard Shortcuts
          
          ### 🔧 Installation
          
          1. Lade die entsprechende Version für dein System herunter
          2. Installiere die Anwendung
          3. Starte MrxDown und beginne mit dem Schreiben!
          
          ### 🐛 Bekannte Probleme
          
          - Siehe [Issues](https://github.com/pepperonas/mrxdown/issues)
          
          ### 📞 Support
          
          - **Issues**: [GitHub Issues](https://github.com/pepperonas/mrxdown/issues)
          - **Diskussionen**: [GitHub Discussions](https://github.com/pepperonas/mrxdown/discussions)
          
          ---
          
          **Entwickelt von Martin Pfeffer © 2025**
          
          🔗 [GitHub Repository](https://github.com/pepperonas/mrxdown) | 🌐 [Website](https://pepperonas.com)
        artifacts: |
          ./macos-artifacts/*
          ./windows-artifacts/*
          ./linux-artifacts/*
        token: ${{ secrets.GITHUB_TOKEN }}
        
